/*
 * Notification Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.nuvalence.workmanager.notification.client.generated.api;

import io.nuvalence.workmanager.notification.client.ApiClient;
import io.nuvalence.workmanager.notification.client.ApiException;
import io.nuvalence.workmanager.notification.client.ApiResponse;
import io.nuvalence.workmanager.notification.client.Pair;

import io.nuvalence.workmanager.notification.client.generated.models.EmailLayoutPageDTO;
import io.nuvalence.workmanager.notification.client.generated.models.EmailLayoutRequestModel;
import io.nuvalence.workmanager.notification.client.generated.models.EmailLayoutResponseModel;
import io.nuvalence.workmanager.notification.client.generated.models.TemplatePageDTO;
import io.nuvalence.workmanager.notification.client.generated.models.TemplateRequestModel;
import io.nuvalence.workmanager.notification.client.generated.models.TemplateResponseModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-25T17:45:48.925365-05:00[America/Bogota]")
public class AdminNotificationApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AdminNotificationApi() {
    this(new ApiClient());
  }

  public AdminNotificationApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a new email layout
   * 
   * @param key The key of the email layout to save (required)
   * @param emailLayoutRequestModel  (required)
   * @return EmailLayoutResponseModel
   * @throws ApiException if fails to make API call
   */
  public EmailLayoutResponseModel createEmailLayout(String key, EmailLayoutRequestModel emailLayoutRequestModel) throws ApiException {
    ApiResponse<EmailLayoutResponseModel> localVarResponse = createEmailLayoutWithHttpInfo(key, emailLayoutRequestModel);
    return localVarResponse.getData();
  }

  /**
   * Create a new email layout
   * 
   * @param key The key of the email layout to save (required)
   * @param emailLayoutRequestModel  (required)
   * @return ApiResponse&lt;EmailLayoutResponseModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EmailLayoutResponseModel> createEmailLayoutWithHttpInfo(String key, EmailLayoutRequestModel emailLayoutRequestModel) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createEmailLayoutRequestBuilder(key, emailLayoutRequestModel);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createEmailLayout", localVarResponse);
        }
        return new ApiResponse<EmailLayoutResponseModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EmailLayoutResponseModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createEmailLayoutRequestBuilder(String key, EmailLayoutRequestModel emailLayoutRequestModel) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling createEmailLayout");
    }
    // verify the required parameter 'emailLayoutRequestModel' is set
    if (emailLayoutRequestModel == null) {
      throw new ApiException(400, "Missing the required parameter 'emailLayoutRequestModel' when calling createEmailLayout");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/admin/email-layout/{key}"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(emailLayoutRequestModel);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create or update a template
   * 
   * @param key The key of the template to save (required)
   * @param templateRequestModel  (required)
   * @return TemplateResponseModel
   * @throws ApiException if fails to make API call
   */
  public TemplateResponseModel createTemplate(String key, TemplateRequestModel templateRequestModel) throws ApiException {
    ApiResponse<TemplateResponseModel> localVarResponse = createTemplateWithHttpInfo(key, templateRequestModel);
    return localVarResponse.getData();
  }

  /**
   * Create or update a template
   * 
   * @param key The key of the template to save (required)
   * @param templateRequestModel  (required)
   * @return ApiResponse&lt;TemplateResponseModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplateResponseModel> createTemplateWithHttpInfo(String key, TemplateRequestModel templateRequestModel) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createTemplateRequestBuilder(key, templateRequestModel);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createTemplate", localVarResponse);
        }
        return new ApiResponse<TemplateResponseModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplateResponseModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createTemplateRequestBuilder(String key, TemplateRequestModel templateRequestModel) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling createTemplate");
    }
    // verify the required parameter 'templateRequestModel' is set
    if (templateRequestModel == null) {
      throw new ApiException(400, "Missing the required parameter 'templateRequestModel' when calling createTemplate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/admin/templates/{key}"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(templateRequestModel);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get email layout by key
   * 
   * @param key The key of the email layout to retrieve (required)
   * @return EmailLayoutResponseModel
   * @throws ApiException if fails to make API call
   */
  public EmailLayoutResponseModel getEmailLayoutByKey(String key) throws ApiException {
    ApiResponse<EmailLayoutResponseModel> localVarResponse = getEmailLayoutByKeyWithHttpInfo(key);
    return localVarResponse.getData();
  }

  /**
   * Get email layout by key
   * 
   * @param key The key of the email layout to retrieve (required)
   * @return ApiResponse&lt;EmailLayoutResponseModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EmailLayoutResponseModel> getEmailLayoutByKeyWithHttpInfo(String key) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEmailLayoutByKeyRequestBuilder(key);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEmailLayoutByKey", localVarResponse);
        }
        return new ApiResponse<EmailLayoutResponseModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EmailLayoutResponseModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEmailLayoutByKeyRequestBuilder(String key) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getEmailLayoutByKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/admin/email-layout/{key}"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all email layouts
   * 
   * @param pageNumber The page number for pagination (zero-based) (optional, default to 0)
   * @param pageSize How many items to return at one time (max 200) (optional, default to 50)
   * @param sortOrder Determines direction for resulting sorting. (optional, default to ASC)
   * @param sortBy Field to sort email layouts by. Email is chosen by default. (optional)
   * @param name Field to filter email layouts by name (optional)
   * @return EmailLayoutPageDTO
   * @throws ApiException if fails to make API call
   */
  public EmailLayoutPageDTO getEmailLayouts(Integer pageNumber, Integer pageSize, String sortOrder, String sortBy, String name) throws ApiException {
    ApiResponse<EmailLayoutPageDTO> localVarResponse = getEmailLayoutsWithHttpInfo(pageNumber, pageSize, sortOrder, sortBy, name);
    return localVarResponse.getData();
  }

  /**
   * Get all email layouts
   * 
   * @param pageNumber The page number for pagination (zero-based) (optional, default to 0)
   * @param pageSize How many items to return at one time (max 200) (optional, default to 50)
   * @param sortOrder Determines direction for resulting sorting. (optional, default to ASC)
   * @param sortBy Field to sort email layouts by. Email is chosen by default. (optional)
   * @param name Field to filter email layouts by name (optional)
   * @return ApiResponse&lt;EmailLayoutPageDTO&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EmailLayoutPageDTO> getEmailLayoutsWithHttpInfo(Integer pageNumber, Integer pageSize, String sortOrder, String sortBy, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEmailLayoutsRequestBuilder(pageNumber, pageSize, sortOrder, sortBy, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEmailLayouts", localVarResponse);
        }
        return new ApiResponse<EmailLayoutPageDTO>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EmailLayoutPageDTO>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEmailLayoutsRequestBuilder(Integer pageNumber, Integer pageSize, String sortOrder, String sortBy, String name) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/admin/email-layouts";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "pageNumber";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNumber", pageNumber));
    localVarQueryParameterBaseName = "pageSize";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParameterBaseName = "sortOrder";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sortOrder", sortOrder));
    localVarQueryParameterBaseName = "sortBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sortBy", sortBy));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get template by key
   * 
   * @param key The key of the template to retrieve (required)
   * @return TemplateResponseModel
   * @throws ApiException if fails to make API call
   */
  public TemplateResponseModel getTemplateByKey(String key) throws ApiException {
    ApiResponse<TemplateResponseModel> localVarResponse = getTemplateByKeyWithHttpInfo(key);
    return localVarResponse.getData();
  }

  /**
   * Get template by key
   * 
   * @param key The key of the template to retrieve (required)
   * @return ApiResponse&lt;TemplateResponseModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplateResponseModel> getTemplateByKeyWithHttpInfo(String key) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getTemplateByKeyRequestBuilder(key);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getTemplateByKey", localVarResponse);
        }
        return new ApiResponse<TemplateResponseModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplateResponseModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getTemplateByKeyRequestBuilder(String key) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getTemplateByKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/admin/templates/{key}"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all templates
   * 
   * @param pageNumber The page number for pagination (zero-based) (optional, default to 0)
   * @param pageSize How many items to return at one time (max 200) (optional, default to 50)
   * @param sortOrder Determines direction for resulting sorting. (optional, default to ASC)
   * @param sortBy Field to sort templates by. Key is chosen by default. (optional)
   * @param name Field to filter templates by name (optional)
   * @return TemplatePageDTO
   * @throws ApiException if fails to make API call
   */
  public TemplatePageDTO getTemplates(Integer pageNumber, Integer pageSize, String sortOrder, String sortBy, String name) throws ApiException {
    ApiResponse<TemplatePageDTO> localVarResponse = getTemplatesWithHttpInfo(pageNumber, pageSize, sortOrder, sortBy, name);
    return localVarResponse.getData();
  }

  /**
   * Get all templates
   * 
   * @param pageNumber The page number for pagination (zero-based) (optional, default to 0)
   * @param pageSize How many items to return at one time (max 200) (optional, default to 50)
   * @param sortOrder Determines direction for resulting sorting. (optional, default to ASC)
   * @param sortBy Field to sort templates by. Key is chosen by default. (optional)
   * @param name Field to filter templates by name (optional)
   * @return ApiResponse&lt;TemplatePageDTO&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplatePageDTO> getTemplatesWithHttpInfo(Integer pageNumber, Integer pageSize, String sortOrder, String sortBy, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getTemplatesRequestBuilder(pageNumber, pageSize, sortOrder, sortBy, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getTemplates", localVarResponse);
        }
        return new ApiResponse<TemplatePageDTO>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplatePageDTO>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getTemplatesRequestBuilder(Integer pageNumber, Integer pageSize, String sortOrder, String sortBy, String name) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/admin/templates";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "pageNumber";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNumber", pageNumber));
    localVarQueryParameterBaseName = "pageSize";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParameterBaseName = "sortOrder";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sortOrder", sortOrder));
    localVarQueryParameterBaseName = "sortBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sortBy", sortBy));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
