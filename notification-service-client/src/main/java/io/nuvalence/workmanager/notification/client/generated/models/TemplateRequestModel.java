/*
 * Notification Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nuvalence.workmanager.notification.client.generated.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.nuvalence.workmanager.notification.client.generated.models.EmailFormatModel;
import io.nuvalence.workmanager.notification.client.generated.models.TemplateRequestModelSmsFormat;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Template object that needs to be added to the db
 */
@JsonPropertyOrder({
  TemplateRequestModel.JSON_PROPERTY_NAME,
  TemplateRequestModel.JSON_PROPERTY_DESCRIPTION,
  TemplateRequestModel.JSON_PROPERTY_PARAMETERS,
  TemplateRequestModel.JSON_PROPERTY_EMAIL_FORMAT,
  TemplateRequestModel.JSON_PROPERTY_SMS_FORMAT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-25T17:45:48.925365-05:00[America/Bogota]")
public class TemplateRequestModel {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_PARAMETERS = "parameters";
  private Map<String, String> parameters = new HashMap<>();

  public static final String JSON_PROPERTY_EMAIL_FORMAT = "emailFormat";
  private EmailFormatModel emailFormat;

  public static final String JSON_PROPERTY_SMS_FORMAT = "smsFormat";
  private TemplateRequestModelSmsFormat smsFormat;

  public TemplateRequestModel() { 
  }

  public TemplateRequestModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public TemplateRequestModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public TemplateRequestModel parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public TemplateRequestModel putParametersItem(String key, String parametersItem) {
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, String> getParameters() {
    return parameters;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public TemplateRequestModel emailFormat(EmailFormatModel emailFormat) {
    this.emailFormat = emailFormat;
    return this;
  }

   /**
   * Get emailFormat
   * @return emailFormat
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMAIL_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EmailFormatModel getEmailFormat() {
    return emailFormat;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmailFormat(EmailFormatModel emailFormat) {
    this.emailFormat = emailFormat;
  }


  public TemplateRequestModel smsFormat(TemplateRequestModelSmsFormat smsFormat) {
    this.smsFormat = smsFormat;
    return this;
  }

   /**
   * Get smsFormat
   * @return smsFormat
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SMS_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TemplateRequestModelSmsFormat getSmsFormat() {
    return smsFormat;
  }


  @JsonProperty(JSON_PROPERTY_SMS_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSmsFormat(TemplateRequestModelSmsFormat smsFormat) {
    this.smsFormat = smsFormat;
  }


  /**
   * Return true if this TemplateRequestModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateRequestModel templateRequestModel = (TemplateRequestModel) o;
    return Objects.equals(this.name, templateRequestModel.name) &&
        Objects.equals(this.description, templateRequestModel.description) &&
        Objects.equals(this.parameters, templateRequestModel.parameters) &&
        Objects.equals(this.emailFormat, templateRequestModel.emailFormat) &&
        Objects.equals(this.smsFormat, templateRequestModel.smsFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, parameters, emailFormat, smsFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateRequestModel {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    emailFormat: ").append(toIndentedString(emailFormat)).append("\n");
    sb.append("    smsFormat: ").append(toIndentedString(smsFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `parameters` to the URL query string
    if (getParameters() != null) {
      for (String _key : getParameters().keySet()) {
        joiner.add(String.format("%sparameters%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getParameters().get(_key), URLEncoder.encode(String.valueOf(getParameters().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `emailFormat` to the URL query string
    if (getEmailFormat() != null) {
      joiner.add(getEmailFormat().toUrlQueryString(prefix + "emailFormat" + suffix));
    }

    // add `smsFormat` to the URL query string
    if (getSmsFormat() != null) {
      joiner.add(getSmsFormat().toUrlQueryString(prefix + "smsFormat" + suffix));
    }

    return joiner.toString();
  }
}

