/*
 * Notification Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nuvalence.workmanager.notification.client.generated.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.nuvalence.workmanager.notification.client.generated.models.LocalizedTemplateModel;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * EmailFormatModel
 */
@JsonPropertyOrder({
  EmailFormatModel.JSON_PROPERTY_LAYOUT_KEY,
  EmailFormatModel.JSON_PROPERTY_SUBJECT,
  EmailFormatModel.JSON_PROPERTY_CONTENT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-25T17:45:48.925365-05:00[America/Bogota]")
public class EmailFormatModel {
  public static final String JSON_PROPERTY_LAYOUT_KEY = "layoutKey";
  private String layoutKey;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private LocalizedTemplateModel subject;

  public static final String JSON_PROPERTY_CONTENT = "content";
  private Map<String, LocalizedTemplateModel> content = new HashMap<>();

  public EmailFormatModel() { 
  }

  public EmailFormatModel layoutKey(String layoutKey) {
    this.layoutKey = layoutKey;
    return this;
  }

   /**
   * Get layoutKey
   * @return layoutKey
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAYOUT_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLayoutKey() {
    return layoutKey;
  }


  @JsonProperty(JSON_PROPERTY_LAYOUT_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLayoutKey(String layoutKey) {
    this.layoutKey = layoutKey;
  }


  public EmailFormatModel subject(LocalizedTemplateModel subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalizedTemplateModel getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubject(LocalizedTemplateModel subject) {
    this.subject = subject;
  }


  public EmailFormatModel content(Map<String, LocalizedTemplateModel> content) {
    this.content = content;
    return this;
  }

  public EmailFormatModel putContentItem(String key, LocalizedTemplateModel contentItem) {
    this.content.put(key, contentItem);
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, LocalizedTemplateModel> getContent() {
    return content;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContent(Map<String, LocalizedTemplateModel> content) {
    this.content = content;
  }


  /**
   * Return true if this EmailFormatModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailFormatModel emailFormatModel = (EmailFormatModel) o;
    return Objects.equals(this.layoutKey, emailFormatModel.layoutKey) &&
        Objects.equals(this.subject, emailFormatModel.subject) &&
        Objects.equals(this.content, emailFormatModel.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layoutKey, subject, content);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailFormatModel {\n");
    sb.append("    layoutKey: ").append(toIndentedString(layoutKey)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `layoutKey` to the URL query string
    if (getLayoutKey() != null) {
      joiner.add(String.format("%slayoutKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLayoutKey()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `subject` to the URL query string
    if (getSubject() != null) {
      joiner.add(getSubject().toUrlQueryString(prefix + "subject" + suffix));
    }

    // add `content` to the URL query string
    if (getContent() != null) {
      for (String _key : getContent().keySet()) {
        if (getContent().get(_key) != null) {
          joiner.add(getContent().get(_key).toUrlQueryString(String.format("%scontent%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

