timeout: 1800s
logsBucket: "gs://${_ARTIFACT_BUCKET_NAME}/cloudbuild-logs/app-${_SERVICE_NAME}-push-request-trigger"
options:
  machineType: 'E2_HIGHCPU_8'
# availableSecrets:
#   secretManager:
#   - versionName: "projects/$PROJECT_ID/secrets/${_SONARQUBE_TOKEN_SECRET_NAME}/versions/latest"
#     env: 'SONARQUBE_TOKEN'
steps:
  # - id: 'Gradle Build && Set up ssh tunnel && Publish to SonarQube'
  #   secretEnv: ['SONARQUBE_TOKEN']
  #   name: "${_GAR_BUILDER_URL}/cloudbuild-jdk17"
  #   entrypoint: bash
  #   args:
  #     - '-c'
  #     - |
  #       SONAR_HOST=$(gcloud compute instances list --filter 'name~sonarqube' --format 'value(name)')
  #       SONAR_ZONE=$(gcloud compute instances list --filter 'name~sonarqube' --format 'value(zone)')
  #       gcloud compute ssh sonarqube@$$SONAR_HOST --zone $$SONAR_ZONE
  #       gcloud compute ssh sonarqube@$$SONAR_HOST  \
  #         --zone $$SONAR_ZONE \
  #         --tunnel-through-iap \
  #         --project $PROJECT_ID \
  #         -- -NL 9000:localhost:9000 &
  #       PID=$?
  #       ELAPSED=0
  #       TIMEOUT=10
  #       echo "Establishing tunnel..."
  #       until curl -s http://localhost:9000
  #         do
  #         sleep 1
  #         if (( ELAPSED > TIMEOUT ))
  #           then
  #           echo "establishing tunnel timed out. exiting."
  #           kill $$PID
  #           exit 1
  #         fi
  #         ELAPSED=$(( ELAPSED + 1 ))
  #       done
  #       echo "Tunnel has been established"
  #       ./gradlew \
  #           -Dsonar.login="$$SONARQUBE_TOKEN" \
  #           -Dsonar.projectKey=${REPO_NAME} \
  #           -Dsonar.projectName=${REPO_NAME} \
  #           -Dsonar.host.url=http://localhost:9000 \
  #           -Dsonar.branch.name=${BRANCH_NAME} \
  #            clean build jacocoTestReport sonar
  #       EXIT=$?
  #       echo "Build exited with status code $$EXIT"

  #       kill $$PID

  #       ## Fail code needs to be the last step in the ID.
  #       ## Moving an escape check to the end of the ID.

  #       if [[ $$EXIT > 0 ]]; then
  #         exit 1
  #       fi

  - id: 'build'
    name: "${_GAR_BUILDER_URL}/helm:4.0.0"
    entrypoint: bash
    args:
      - "-c"
      - |
        skaffold build -p dev --interactive=false --file-output=/workspace/artifacts.json

  - id: "Cloud Deploy Release"
    name: "google/cloud-sdk"
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud deploy releases create "$(echo ${REPO_NAME} | cut -d- -f2-)-${SHORT_SHA}" \
          --project=$PROJECT_ID \
          --region=${_DEPLOY_REGION} \
          --delivery-pipeline=${REPO_NAME} \
          --gcs-source-staging-dir=gs://${_CLOUD_DEPLOY_SOURCE_BUCKET}/source \
          --build-artifacts=/workspace/artifacts.json
