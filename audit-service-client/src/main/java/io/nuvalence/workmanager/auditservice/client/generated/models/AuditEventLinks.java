/*
 * Nuvalence Audit Service
 * System of record for activities performed within a distributed system.  **Terminology** - A **business object** describes a single domain object, with some logical type (eg: user, document) on which system activities occur and will be audited. - An **event** refers to any action occurring within the distributed system which should be audited. The supported types of events are further enumerated below.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nuvalence.workmanager.auditservice.client.generated.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * AuditEventLinks
 */
@JsonPropertyOrder({
  AuditEventLinks.JSON_PROPERTY_SYSTEM_OF_RECORD,
  AuditEventLinks.JSON_PROPERTY_RELATED_BUSINESS_OBJECTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T21:47:55.006746-05:00[America/Bogota]")
public class AuditEventLinks {
  public static final String JSON_PROPERTY_SYSTEM_OF_RECORD = "systemOfRecord";
  private String systemOfRecord;

  public static final String JSON_PROPERTY_RELATED_BUSINESS_OBJECTS = "relatedBusinessObjects";
  private List<String> relatedBusinessObjects = new ArrayList<>();

  public AuditEventLinks() { 
  }

  public AuditEventLinks systemOfRecord(String systemOfRecord) {
    this.systemOfRecord = systemOfRecord;
    return this;
  }

   /**
   * Link to the business object itself within its own system of record.
   * @return systemOfRecord
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SYSTEM_OF_RECORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSystemOfRecord() {
    return systemOfRecord;
  }


  @JsonProperty(JSON_PROPERTY_SYSTEM_OF_RECORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSystemOfRecord(String systemOfRecord) {
    this.systemOfRecord = systemOfRecord;
  }


  public AuditEventLinks relatedBusinessObjects(List<String> relatedBusinessObjects) {
    this.relatedBusinessObjects = relatedBusinessObjects;
    return this;
  }

  public AuditEventLinks addRelatedBusinessObjectsItem(String relatedBusinessObjectsItem) {
    if (this.relatedBusinessObjects == null) {
      this.relatedBusinessObjects = new ArrayList<>();
    }
    this.relatedBusinessObjects.add(relatedBusinessObjectsItem);
    return this;
  }

   /**
   * Get relatedBusinessObjects
   * @return relatedBusinessObjects
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELATED_BUSINESS_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRelatedBusinessObjects() {
    return relatedBusinessObjects;
  }


  @JsonProperty(JSON_PROPERTY_RELATED_BUSINESS_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelatedBusinessObjects(List<String> relatedBusinessObjects) {
    this.relatedBusinessObjects = relatedBusinessObjects;
  }


  /**
   * Return true if this AuditEventLinks object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditEventLinks auditEventLinks = (AuditEventLinks) o;
    return Objects.equals(this.systemOfRecord, auditEventLinks.systemOfRecord) &&
        Objects.equals(this.relatedBusinessObjects, auditEventLinks.relatedBusinessObjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(systemOfRecord, relatedBusinessObjects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditEventLinks {\n");
    sb.append("    systemOfRecord: ").append(toIndentedString(systemOfRecord)).append("\n");
    sb.append("    relatedBusinessObjects: ").append(toIndentedString(relatedBusinessObjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `systemOfRecord` to the URL query string
    if (getSystemOfRecord() != null) {
      joiner.add(String.format("%ssystemOfRecord%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSystemOfRecord()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `relatedBusinessObjects` to the URL query string
    if (getRelatedBusinessObjects() != null) {
      for (int i = 0; i < getRelatedBusinessObjects().size(); i++) {
        joiner.add(String.format("%srelatedBusinessObjects%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getRelatedBusinessObjects().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

