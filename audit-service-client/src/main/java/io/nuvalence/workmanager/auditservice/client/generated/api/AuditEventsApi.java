/*
 * Nuvalence Audit Service
 * System of record for activities performed within a distributed system.  **Terminology** - A **business object** describes a single domain object, with some logical type (eg: user, document) on which system activities occur and will be audited. - An **event** refers to any action occurring within the distributed system which should be audited. The supported types of events are further enumerated below.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.nuvalence.workmanager.auditservice.client.generated.api;

import io.nuvalence.workmanager.auditservice.client.ApiClient;
import io.nuvalence.workmanager.auditservice.client.ApiException;
import io.nuvalence.workmanager.auditservice.client.ApiResponse;
import io.nuvalence.workmanager.auditservice.client.Pair;

import io.nuvalence.workmanager.auditservice.client.generated.models.AuditEventId;
import io.nuvalence.workmanager.auditservice.client.generated.models.AuditEventRequest;
import io.nuvalence.workmanager.auditservice.client.generated.models.AuditEventsPage;
import io.nuvalence.workmanager.auditservice.client.generated.models.ErrorResponse;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T21:47:55.006746-05:00[America/Bogota]")
public class AuditEventsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AuditEventsApi() {
    this(new ApiClient());
  }

  public AuditEventsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Gets all audit events for the specified business object
   * 
   * @param businessObjectType Type of business object. (required)
   * @param id Unique identifier for a business object of the specified type. (required)
   * @param sortOrder Controls whether results are returned in chronologically ascending or descending order. (optional, default to ASC)
   * @param sortBy Field to sort audit events by. businessObjectType is chosen by default. (optional, default to timestamp)
   * @param startTime Specifies a start time (inclusive) for filtering results to events which occurred at or after the specified time. (optional)
   * @param endTime Specifies a end time (exclusive)for filtering results to events which occurred before the specified time. (optional)
   * @param pageNumber Results page number (optional, default to 0)
   * @param pageSize Results page number (optional, default to 50)
   * @return AuditEventsPage
   * @throws ApiException if fails to make API call
   */
  public AuditEventsPage getEvents(String businessObjectType, UUID id, String sortOrder, String sortBy, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageNumber, Integer pageSize) throws ApiException {
    ApiResponse<AuditEventsPage> localVarResponse = getEventsWithHttpInfo(businessObjectType, id, sortOrder, sortBy, startTime, endTime, pageNumber, pageSize);
    return localVarResponse.getData();
  }

  /**
   * Gets all audit events for the specified business object
   * 
   * @param businessObjectType Type of business object. (required)
   * @param id Unique identifier for a business object of the specified type. (required)
   * @param sortOrder Controls whether results are returned in chronologically ascending or descending order. (optional, default to ASC)
   * @param sortBy Field to sort audit events by. businessObjectType is chosen by default. (optional, default to timestamp)
   * @param startTime Specifies a start time (inclusive) for filtering results to events which occurred at or after the specified time. (optional)
   * @param endTime Specifies a end time (exclusive)for filtering results to events which occurred before the specified time. (optional)
   * @param pageNumber Results page number (optional, default to 0)
   * @param pageSize Results page number (optional, default to 50)
   * @return ApiResponse&lt;AuditEventsPage&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AuditEventsPage> getEventsWithHttpInfo(String businessObjectType, UUID id, String sortOrder, String sortBy, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageNumber, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEventsRequestBuilder(businessObjectType, id, sortOrder, sortBy, startTime, endTime, pageNumber, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEvents", localVarResponse);
        }
        return new ApiResponse<AuditEventsPage>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AuditEventsPage>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEventsRequestBuilder(String businessObjectType, UUID id, String sortOrder, String sortBy, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageNumber, Integer pageSize) throws ApiException {
    // verify the required parameter 'businessObjectType' is set
    if (businessObjectType == null) {
      throw new ApiException(400, "Missing the required parameter 'businessObjectType' when calling getEvents");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getEvents");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/audit-events/{businessObjectType}/{id}"
        .replace("{businessObjectType}", ApiClient.urlEncode(businessObjectType.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "sortOrder";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sortOrder", sortOrder));
    localVarQueryParameterBaseName = "sortBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sortBy", sortBy));
    localVarQueryParameterBaseName = "startTime";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTime", startTime));
    localVarQueryParameterBaseName = "endTime";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endTime", endTime));
    localVarQueryParameterBaseName = "pageNumber";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNumber", pageNumber));
    localVarQueryParameterBaseName = "pageSize";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Creates an audit event for the specified business object
   * 
   * @param businessObjectType Type of business object. (required)
   * @param id Unique identifier for a business object of the specified type. (required)
   * @param auditEventRequest  (required)
   * @return AuditEventId
   * @throws ApiException if fails to make API call
   */
  public AuditEventId postEvent(String businessObjectType, UUID id, AuditEventRequest auditEventRequest) throws ApiException {
    ApiResponse<AuditEventId> localVarResponse = postEventWithHttpInfo(businessObjectType, id, auditEventRequest);
    return localVarResponse.getData();
  }

  /**
   * Creates an audit event for the specified business object
   * 
   * @param businessObjectType Type of business object. (required)
   * @param id Unique identifier for a business object of the specified type. (required)
   * @param auditEventRequest  (required)
   * @return ApiResponse&lt;AuditEventId&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AuditEventId> postEventWithHttpInfo(String businessObjectType, UUID id, AuditEventRequest auditEventRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = postEventRequestBuilder(businessObjectType, id, auditEventRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("postEvent", localVarResponse);
        }
        return new ApiResponse<AuditEventId>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AuditEventId>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder postEventRequestBuilder(String businessObjectType, UUID id, AuditEventRequest auditEventRequest) throws ApiException {
    // verify the required parameter 'businessObjectType' is set
    if (businessObjectType == null) {
      throw new ApiException(400, "Missing the required parameter 'businessObjectType' when calling postEvent");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling postEvent");
    }
    // verify the required parameter 'auditEventRequest' is set
    if (auditEventRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'auditEventRequest' when calling postEvent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/audit-events/{businessObjectType}/{id}"
        .replace("{businessObjectType}", ApiClient.urlEncode(businessObjectType.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(auditEventRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
