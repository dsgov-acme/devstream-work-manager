/*
 * Nuvalence Audit Service
 * System of record for activities performed within a distributed system.  **Terminology** - A **business object** describes a single domain object, with some logical type (eg: user, document) on which system activities occur and will be audited. - An **event** refers to any action occurring within the distributed system which should be audited. The supported types of events are further enumerated below.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nuvalence.workmanager.auditservice.client.generated.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.nuvalence.workmanager.auditservice.client.generated.models.AuditEventLinks;
import io.nuvalence.workmanager.auditservice.client.generated.models.AuditEventRequestEventData;
import io.nuvalence.workmanager.auditservice.client.generated.models.RequestContext;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Request payload for creating an audit event.
 */
@JsonPropertyOrder({
  AuditEventRequest.JSON_PROPERTY_EVENT_DATA,
  AuditEventRequest.JSON_PROPERTY_TIMESTAMP,
  AuditEventRequest.JSON_PROPERTY_SUMMARY,
  AuditEventRequest.JSON_PROPERTY_LINKS,
  AuditEventRequest.JSON_PROPERTY_REQUEST_CONTEXT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T21:47:55.006746-05:00[America/Bogota]")
public class AuditEventRequest {
  public static final String JSON_PROPERTY_EVENT_DATA = "eventData";
  private AuditEventRequestEventData eventData;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private OffsetDateTime timestamp;

  public static final String JSON_PROPERTY_SUMMARY = "summary";
  private String summary;

  public static final String JSON_PROPERTY_LINKS = "links";
  private AuditEventLinks links;

  public static final String JSON_PROPERTY_REQUEST_CONTEXT = "requestContext";
  private RequestContext requestContext;

  public AuditEventRequest() { 
  }

  public AuditEventRequest eventData(AuditEventRequestEventData eventData) {
    this.eventData = eventData;
    return this;
  }

   /**
   * Get eventData
   * @return eventData
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EVENT_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AuditEventRequestEventData getEventData() {
    return eventData;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventData(AuditEventRequestEventData eventData) {
    this.eventData = eventData;
  }


  public AuditEventRequest timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public AuditEventRequest summary(String summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Plain text summary of the event which occurred, for the purpose of creating human user friendly views of the data.
   * @return summary
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSummary() {
    return summary;
  }


  @JsonProperty(JSON_PROPERTY_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSummary(String summary) {
    this.summary = summary;
  }


  public AuditEventRequest links(AuditEventLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AuditEventLinks getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinks(AuditEventLinks links) {
    this.links = links;
  }


  public AuditEventRequest requestContext(RequestContext requestContext) {
    this.requestContext = requestContext;
    return this;
  }

   /**
   * Get requestContext
   * @return requestContext
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUEST_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequestContext getRequestContext() {
    return requestContext;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestContext(RequestContext requestContext) {
    this.requestContext = requestContext;
  }


  /**
   * Return true if this AuditEventRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditEventRequest auditEventRequest = (AuditEventRequest) o;
    return Objects.equals(this.eventData, auditEventRequest.eventData) &&
        Objects.equals(this.timestamp, auditEventRequest.timestamp) &&
        Objects.equals(this.summary, auditEventRequest.summary) &&
        Objects.equals(this.links, auditEventRequest.links) &&
        Objects.equals(this.requestContext, auditEventRequest.requestContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventData, timestamp, summary, links, requestContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditEventRequest {\n");
    sb.append("    eventData: ").append(toIndentedString(eventData)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    requestContext: ").append(toIndentedString(requestContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `eventData` to the URL query string
    if (getEventData() != null) {
      joiner.add(getEventData().toUrlQueryString(prefix + "eventData" + suffix));
    }

    // add `timestamp` to the URL query string
    if (getTimestamp() != null) {
      joiner.add(String.format("%stimestamp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimestamp()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `summary` to the URL query string
    if (getSummary() != null) {
      joiner.add(String.format("%ssummary%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSummary()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `links` to the URL query string
    if (getLinks() != null) {
      joiner.add(getLinks().toUrlQueryString(prefix + "links" + suffix));
    }

    // add `requestContext` to the URL query string
    if (getRequestContext() != null) {
      joiner.add(getRequestContext().toUrlQueryString(prefix + "requestContext" + suffix));
    }

    return joiner.toString();
  }
}

