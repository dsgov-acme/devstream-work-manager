/*
 * Nuvalence Audit Service
 * System of record for activities performed within a distributed system.  **Terminology** - A **business object** describes a single domain object, with some logical type (eg: user, document) on which system activities occur and will be audited. - An **event** refers to any action occurring within the distributed system which should be audited. The supported types of events are further enumerated below.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nuvalence.workmanager.auditservice.client.generated.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Contextual metadata for the request which triggered an event to occur.
 */
@JsonPropertyOrder({
  RequestContext.JSON_PROPERTY_USER_ID,
  RequestContext.JSON_PROPERTY_TENANT_ID,
  RequestContext.JSON_PROPERTY_ORIGINATOR_ID,
  RequestContext.JSON_PROPERTY_REQUEST_ID,
  RequestContext.JSON_PROPERTY_TRACE_ID,
  RequestContext.JSON_PROPERTY_SPAN_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T21:47:55.006746-05:00[America/Bogota]")
public class RequestContext {
  public static final String JSON_PROPERTY_USER_ID = "userId";
  private UUID userId;

  public static final String JSON_PROPERTY_TENANT_ID = "tenantId";
  private UUID tenantId;

  public static final String JSON_PROPERTY_ORIGINATOR_ID = "originatorId";
  private UUID originatorId;

  public static final String JSON_PROPERTY_REQUEST_ID = "requestId";
  private UUID requestId;

  public static final String JSON_PROPERTY_TRACE_ID = "traceId";
  private UUID traceId;

  public static final String JSON_PROPERTY_SPAN_ID = "spanId";
  private UUID spanId;

  public RequestContext() { 
  }

  public RequestContext userId(UUID userId) {
    this.userId = userId;
    return this;
  }

   /**
   * The user identifier associated with this event; may be null or undefined if the event occurs completely asynchronously via a backend such that there is no associated user.
   * @return userId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public RequestContext tenantId(UUID tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * The user identifier associated with this event; may be null or undefined if the system is entirely single tenanted or if the event occurs completely asynchronously via a backend such that there is no associated user.
   * @return tenantId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getTenantId() {
    return tenantId;
  }


  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTenantId(UUID tenantId) {
    this.tenantId = tenantId;
  }


  public RequestContext originatorId(UUID originatorId) {
    this.originatorId = originatorId;
    return this;
  }

   /**
   * The identifier of the immediate requester/originator (may be a system or a user) of the event being audited. This must be provided, for scheduled background tasks, use the identifier for the system performing the task.
   * @return originatorId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORIGINATOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getOriginatorId() {
    return originatorId;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINATOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOriginatorId(UUID originatorId) {
    this.originatorId = originatorId;
  }


  public RequestContext requestId(UUID requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * The request identifier for the request originating the event.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getRequestId() {
    return requestId;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(UUID requestId) {
    this.requestId = requestId;
  }


  public RequestContext traceId(UUID traceId) {
    this.traceId = traceId;
    return this;
  }

   /**
   * The request identifier for the trace containing the creation of the event.
   * @return traceId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRACE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getTraceId() {
    return traceId;
  }


  @JsonProperty(JSON_PROPERTY_TRACE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTraceId(UUID traceId) {
    this.traceId = traceId;
  }


  public RequestContext spanId(UUID spanId) {
    this.spanId = spanId;
    return this;
  }

   /**
   * The request identifier for the trace containing the creation of the event.
   * @return spanId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPAN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getSpanId() {
    return spanId;
  }


  @JsonProperty(JSON_PROPERTY_SPAN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpanId(UUID spanId) {
    this.spanId = spanId;
  }


  /**
   * Return true if this RequestContext object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestContext requestContext = (RequestContext) o;
    return Objects.equals(this.userId, requestContext.userId) &&
        Objects.equals(this.tenantId, requestContext.tenantId) &&
        Objects.equals(this.originatorId, requestContext.originatorId) &&
        Objects.equals(this.requestId, requestContext.requestId) &&
        Objects.equals(this.traceId, requestContext.traceId) &&
        Objects.equals(this.spanId, requestContext.spanId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, tenantId, originatorId, requestId, traceId, spanId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestContext {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    originatorId: ").append(toIndentedString(originatorId)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
    sb.append("    spanId: ").append(toIndentedString(spanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `userId` to the URL query string
    if (getUserId() != null) {
      joiner.add(String.format("%suserId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tenantId` to the URL query string
    if (getTenantId() != null) {
      joiner.add(String.format("%stenantId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTenantId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `originatorId` to the URL query string
    if (getOriginatorId() != null) {
      joiner.add(String.format("%soriginatorId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOriginatorId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `requestId` to the URL query string
    if (getRequestId() != null) {
      joiner.add(String.format("%srequestId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequestId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `traceId` to the URL query string
    if (getTraceId() != null) {
      joiner.add(String.format("%straceId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTraceId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `spanId` to the URL query string
    if (getSpanId() != null) {
      joiner.add(String.format("%sspanId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSpanId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

